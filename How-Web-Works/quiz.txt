Part One: Solidify Terminology
In your own terms, define the following terms:

What is HTTP?
HTTP is the protocol that browsers and servers use to communicate. It is differrent from other protocols such as ftp, VOIP, etc.
Stand for Hyper Text Trasnfer protocol.

What is a URL?
Means Uniform Resource Location which is where a client is requesting that a document is located.

What is DNS?
Domain Name Service is the service that takes a human readable URL and looks up the IP address assigned to that name.

What is a query string?
Query string is an extension on a URL which passes additional information along for the server to parse and respond appropriately to.

What are two HTTP verbs and how are they different?
GET - a browser request to a server and does not contain a body - it can pass information to the server in the query string. Has no side effects on server resources (DB)
POST - is a request to a server with informaiton contained in the body. It can produce side effects on the server side.

What is an HTTP request?
A request for resources to a server.

What is an HTTP response?
An answer to a request from a client application from a server. Has a status code associated with it.

What is an HTTP header? Give a couple examples of request and response headers you have seen.
This is where additional information can be passed to a server so that the server can make decisions about the type of information it should return.
Authorization : <type> <token> => provides a token to access protected routes, signifies that a request does or does not have access to particular resources
Accept-Language: <language> => informs the server as to which languages the resource should be returned in. English(en), French(fr), German(de) are potential candidates here.

What are the processes that happen when you type “http://somesite.com/some/page.html” into a browser?
1. Browser check s to see if URL is cached - if so reders cached version of HTML page
2. Browser uses DNS resolver to turn URL into an IP address
3. Browser sends HTTP request to IP address
4. Browser recieves HTTP response from server
5. Browser reders HTTP response into web page.

Part Two: Practice Tools
Using curl, make a GET request to the icanhazdadjoke.com API to find all jokes involving the word “pirate”
curl https://icanhazdadjoke.com/search?term=pirate

What did the pirate say on his 80th birthday? Aye Matey!
Why couldn't the kid see the pirate movie? Because it was rated arrr!
What does a pirate pay for his corn? A buccaneer!
Why are pirates called pirates? Because they arrr!
Why do pirates not know the alphabet? They always get stuck at "C"

Use dig to find what the IP address is for icanhazdadjoke.com
172.67.211.64
104.21.37.176
Make a simple web page and serve it using python3 -m http.server. Visit the page in a browser.
**used live-server

Part Three: Explore Dev Tools
Build a very simple HTML form that uses the GET method (it can use the same page URL for the action) when the form is submitted.
*DONE
Add a field or two to the form and, after submitting it, explore in Chrome Developer tools how you can view the request and response headers.
*DONE
Edit the page to change the form type to POST, refresh in the browser and re-submit. Do you still see the field in the query string? Explore in Chrome how you can view the request and response headers, as well as the form data.
*DONE
Part Four: Explore the URL API
At times, it’s useful for your JavaScript to look at the URL of the browser window and change how the script works depending on parts of that (particularly the query string).

Read about the URL API
*DONE
Try some of the code examples in the Chrome Console so that you can get comfortable with the basic methods and properties for instances of the URL class.
*DONE